// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DUMPTRANSMIT_MAIL_H_
#define FLATBUFFERS_GENERATED_DUMPTRANSMIT_MAIL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Mail {

struct DumpFileTransmit;
struct DumpFileTransmitBuilder;

struct DumpFileTransmit FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DumpFileTransmitBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_PROGRAM_NAME = 6,
    VT_DUMP_FILE_NAME = 8,
    VT_DATA = 10
  };
  int16_t request_type() const {
    return GetField<int16_t>(VT_REQUEST_TYPE, 0);
  }
  const ::flatbuffers::String *program_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAM_NAME);
  }
  const ::flatbuffers::String *dump_file_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DUMP_FILE_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_REQUEST_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROGRAM_NAME) &&
           verifier.VerifyString(program_name()) &&
           VerifyOffset(verifier, VT_DUMP_FILE_NAME) &&
           verifier.VerifyString(dump_file_name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct DumpFileTransmitBuilder {
  typedef DumpFileTransmit Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(int16_t request_type) {
    fbb_.AddElement<int16_t>(DumpFileTransmit::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_program_name(::flatbuffers::Offset<::flatbuffers::String> program_name) {
    fbb_.AddOffset(DumpFileTransmit::VT_PROGRAM_NAME, program_name);
  }
  void add_dump_file_name(::flatbuffers::Offset<::flatbuffers::String> dump_file_name) {
    fbb_.AddOffset(DumpFileTransmit::VT_DUMP_FILE_NAME, dump_file_name);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(DumpFileTransmit::VT_DATA, data);
  }
  explicit DumpFileTransmitBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DumpFileTransmit> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DumpFileTransmit>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DumpFileTransmit> CreateDumpFileTransmit(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> program_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dump_file_name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  DumpFileTransmitBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_dump_file_name(dump_file_name);
  builder_.add_program_name(program_name);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DumpFileTransmit> CreateDumpFileTransmitDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_type = 0,
    const char *program_name = nullptr,
    const char *dump_file_name = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto program_name__ = program_name ? _fbb.CreateString(program_name) : 0;
  auto dump_file_name__ = dump_file_name ? _fbb.CreateString(dump_file_name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return Mail::CreateDumpFileTransmit(
      _fbb,
      request_type,
      program_name__,
      dump_file_name__,
      data__);
}

inline const Mail::DumpFileTransmit *GetDumpFileTransmit(const void *buf) {
  return ::flatbuffers::GetRoot<Mail::DumpFileTransmit>(buf);
}

inline const Mail::DumpFileTransmit *GetSizePrefixedDumpFileTransmit(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Mail::DumpFileTransmit>(buf);
}

inline bool VerifyDumpFileTransmitBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Mail::DumpFileTransmit>(nullptr);
}

inline bool VerifySizePrefixedDumpFileTransmitBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Mail::DumpFileTransmit>(nullptr);
}

inline void FinishDumpFileTransmitBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mail::DumpFileTransmit> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDumpFileTransmitBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mail::DumpFileTransmit> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Mail

#endif  // FLATBUFFERS_GENERATED_DUMPTRANSMIT_MAIL_H_
