// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAILDATADEFINE_MAIL_H_
#define FLATBUFFERS_GENERATED_MAILDATADEFINE_MAIL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Mail {

struct MailRequest;
struct MailRequestBuilder;

enum PacketType : int8_t {
  PacketType_None = 0,
  PacketType_MailRequest = 1,
  PacketType_DumpFileTransmit = 2,
  PacketType_MIN = PacketType_None,
  PacketType_MAX = PacketType_DumpFileTransmit
};

inline const PacketType (&EnumValuesPacketType())[3] {
  static const PacketType values[] = {
    PacketType_None,
    PacketType_MailRequest,
    PacketType_DumpFileTransmit
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[4] = {
    "None",
    "MailRequest",
    "DumpFileTransmit",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_None, PacketType_DumpFileTransmit)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum RequestType : int8_t {
  RequestType_None = 0,
  RequestType_Start = 1,
  RequestType_Loop = 2,
  RequestType_Stop = 3,
  RequestType_MIN = RequestType_None,
  RequestType_MAX = RequestType_Stop
};

inline const RequestType (&EnumValuesRequestType())[4] {
  static const RequestType values[] = {
    RequestType_None,
    RequestType_Start,
    RequestType_Loop,
    RequestType_Stop
  };
  return values;
}

inline const char * const *EnumNamesRequestType() {
  static const char * const names[5] = {
    "None",
    "Start",
    "Loop",
    "Stop",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestType(RequestType e) {
  if (::flatbuffers::IsOutRange(e, RequestType_None, RequestType_Stop)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestType()[index];
}

struct MailRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MailRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_PROGRAM_NAME = 6
  };
  int16_t request_type() const {
    return GetField<int16_t>(VT_REQUEST_TYPE, 0);
  }
  const ::flatbuffers::String *program_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAM_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_REQUEST_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROGRAM_NAME) &&
           verifier.VerifyString(program_name()) &&
           verifier.EndTable();
  }
};

struct MailRequestBuilder {
  typedef MailRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_request_type(int16_t request_type) {
    fbb_.AddElement<int16_t>(MailRequest::VT_REQUEST_TYPE, request_type, 0);
  }
  void add_program_name(::flatbuffers::Offset<::flatbuffers::String> program_name) {
    fbb_.AddOffset(MailRequest::VT_PROGRAM_NAME, program_name);
  }
  explicit MailRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MailRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MailRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MailRequest> CreateMailRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> program_name = 0) {
  MailRequestBuilder builder_(_fbb);
  builder_.add_program_name(program_name);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MailRequest> CreateMailRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t request_type = 0,
    const char *program_name = nullptr) {
  auto program_name__ = program_name ? _fbb.CreateString(program_name) : 0;
  return Mail::CreateMailRequest(
      _fbb,
      request_type,
      program_name__);
}

inline const Mail::MailRequest *GetMailRequest(const void *buf) {
  return ::flatbuffers::GetRoot<Mail::MailRequest>(buf);
}

inline const Mail::MailRequest *GetSizePrefixedMailRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Mail::MailRequest>(buf);
}

inline bool VerifyMailRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Mail::MailRequest>(nullptr);
}

inline bool VerifySizePrefixedMailRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Mail::MailRequest>(nullptr);
}

inline void FinishMailRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mail::MailRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMailRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mail::MailRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Mail

#endif  // FLATBUFFERS_GENERATED_MAILDATADEFINE_MAIL_H_
