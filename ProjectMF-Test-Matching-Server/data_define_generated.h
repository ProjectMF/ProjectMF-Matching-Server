// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATADEFINE_FLATPACKET_H_
#define FLATBUFFERS_GENERATED_DATADEFINE_FLATPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {

enum PacketType : int8_t {
  PacketType_None = 0,
  PacketType_SignInRequest = 1,
  PacketType_FindMatchRequest = 2,
  PacketType_CreateSessionRequest = 3,
  PacketType_SignInResult = 4,
  PacketType_FindMatchResult = 5,
  PacketType_MIN = PacketType_None,
  PacketType_MAX = PacketType_FindMatchResult
};

inline const PacketType (&EnumValuesPacketType())[6] {
  static const PacketType values[] = {
    PacketType_None,
    PacketType_SignInRequest,
    PacketType_FindMatchRequest,
    PacketType_CreateSessionRequest,
    PacketType_SignInResult,
    PacketType_FindMatchResult
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[7] = {
    "None",
    "SignInRequest",
    "FindMatchRequest",
    "CreateSessionRequest",
    "SignInResult",
    "FindMatchResult",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_None, PacketType_FindMatchResult)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum RequestMessageType : int8_t {
  RequestMessageType_None = 0,
  RequestMessageType_Succeeded = 1,
  RequestMessageType_Failed = 2,
  RequestMessageType_MIN = RequestMessageType_None,
  RequestMessageType_MAX = RequestMessageType_Failed
};

inline const RequestMessageType (&EnumValuesRequestMessageType())[3] {
  static const RequestMessageType values[] = {
    RequestMessageType_None,
    RequestMessageType_Succeeded,
    RequestMessageType_Failed
  };
  return values;
}

inline const char * const *EnumNamesRequestMessageType() {
  static const char * const names[4] = {
    "None",
    "Succeeded",
    "Failed",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequestMessageType(RequestMessageType e) {
  if (::flatbuffers::IsOutRange(e, RequestMessageType_None, RequestMessageType_Failed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequestMessageType()[index];
}

}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_DATADEFINE_FLATPACKET_H_
