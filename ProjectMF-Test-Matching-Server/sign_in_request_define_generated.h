// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGNINREQUESTDEFINE_FLATPACKET_H_
#define FLATBUFFERS_GENERATED_SIGNINREQUESTDEFINE_FLATPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {

struct SignInRequest;
struct SignInRequestBuilder;

struct SignInRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SignInRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           verifier.EndTable();
  }
};

struct SignInRequestBuilder {
  typedef SignInRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(SignInRequest::VT_USER_ID, user_id);
  }
  explicit SignInRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SignInRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SignInRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SignInRequest> CreateSignInRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0) {
  SignInRequestBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SignInRequest> CreateSignInRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return FlatPacket::CreateSignInRequest(
      _fbb,
      user_id__);
}

inline const FlatPacket::SignInRequest *GetSignInRequest(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::SignInRequest>(buf);
}

inline const FlatPacket::SignInRequest *GetSizePrefixedSignInRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::SignInRequest>(buf);
}

inline bool VerifySignInRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::SignInRequest>(nullptr);
}

inline bool VerifySizePrefixedSignInRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::SignInRequest>(nullptr);
}

inline void FinishSignInRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SignInRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSignInRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::SignInRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_SIGNINREQUESTDEFINE_FLATPACKET_H_
