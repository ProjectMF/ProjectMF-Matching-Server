// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATESESSIONREQUEST_FLATPACKET_H_
#define FLATBUFFERS_GENERATED_CREATESESSIONREQUEST_FLATPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {

struct CreateSessionRequest;
struct CreateSessionRequestBuilder;

struct CreateSessionRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateSessionRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UUID = 4,
    VT_SESSION_ID = 6
  };
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const ::flatbuffers::String *session_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SESSION_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_SESSION_ID) &&
           verifier.VerifyString(session_id()) &&
           verifier.EndTable();
  }
};

struct CreateSessionRequestBuilder {
  typedef CreateSessionRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(CreateSessionRequest::VT_UUID, uuid, 0);
  }
  void add_session_id(::flatbuffers::Offset<::flatbuffers::String> session_id) {
    fbb_.AddOffset(CreateSessionRequest::VT_SESSION_ID, session_id);
  }
  explicit CreateSessionRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateSessionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateSessionRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateSessionRequest> CreateCreateSessionRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> session_id = 0) {
  CreateSessionRequestBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreateSessionRequest> CreateCreateSessionRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t uuid = 0,
    const char *session_id = nullptr) {
  auto session_id__ = session_id ? _fbb.CreateString(session_id) : 0;
  return FlatPacket::CreateCreateSessionRequest(
      _fbb,
      uuid,
      session_id__);
}

inline const FlatPacket::CreateSessionRequest *GetCreateSessionRequest(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::CreateSessionRequest>(buf);
}

inline const FlatPacket::CreateSessionRequest *GetSizePrefixedCreateSessionRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::CreateSessionRequest>(buf);
}

inline bool VerifyCreateSessionRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::CreateSessionRequest>(nullptr);
}

inline bool VerifySizePrefixedCreateSessionRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::CreateSessionRequest>(nullptr);
}

inline void FinishCreateSessionRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::CreateSessionRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCreateSessionRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::CreateSessionRequest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_CREATESESSIONREQUEST_FLATPACKET_H_
