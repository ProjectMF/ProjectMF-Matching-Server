// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FINDMATCHRESULT_FLATPACKET_H_
#define FLATBUFFERS_GENERATED_FINDMATCHRESULT_FLATPACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace FlatPacket {

struct FindMatchResult;
struct FindMatchResultBuilder;

enum FindMatchResultType : int8_t {
  FindMatchResultType_None = 0,
  FindMatchResultType_Succeeded = 1,
  FindMatchResultType_Failed = 2,
  FindMatchResultType_MIN = FindMatchResultType_None,
  FindMatchResultType_MAX = FindMatchResultType_Failed
};

inline const FindMatchResultType (&EnumValuesFindMatchResultType())[3] {
  static const FindMatchResultType values[] = {
    FindMatchResultType_None,
    FindMatchResultType_Succeeded,
    FindMatchResultType_Failed
  };
  return values;
}

inline const char * const *EnumNamesFindMatchResultType() {
  static const char * const names[4] = {
    "None",
    "Succeeded",
    "Failed",
    nullptr
  };
  return names;
}

inline const char *EnumNameFindMatchResultType(FindMatchResultType e) {
  if (::flatbuffers::IsOutRange(e, FindMatchResultType_None, FindMatchResultType_Failed)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFindMatchResultType()[index];
}

struct FindMatchResult FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FindMatchResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_UUID = 6,
    VT_SESSION_ID = 8
  };
  uint16_t message_type() const {
    return GetField<uint16_t>(VT_MESSAGE_TYPE, 0);
  }
  int32_t uuid() const {
    return GetField<int32_t>(VT_UUID, 0);
  }
  const ::flatbuffers::String *session_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SESSION_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGE_TYPE, 2) &&
           VerifyField<int32_t>(verifier, VT_UUID, 4) &&
           VerifyOffset(verifier, VT_SESSION_ID) &&
           verifier.VerifyString(session_id()) &&
           verifier.EndTable();
  }
};

struct FindMatchResultBuilder {
  typedef FindMatchResult Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(uint16_t message_type) {
    fbb_.AddElement<uint16_t>(FindMatchResult::VT_MESSAGE_TYPE, message_type, 0);
  }
  void add_uuid(int32_t uuid) {
    fbb_.AddElement<int32_t>(FindMatchResult::VT_UUID, uuid, 0);
  }
  void add_session_id(::flatbuffers::Offset<::flatbuffers::String> session_id) {
    fbb_.AddOffset(FindMatchResult::VT_SESSION_ID, session_id);
  }
  explicit FindMatchResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FindMatchResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FindMatchResult>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FindMatchResult> CreateFindMatchResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t message_type = 0,
    int32_t uuid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> session_id = 0) {
  FindMatchResultBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  builder_.add_uuid(uuid);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FindMatchResult> CreateFindMatchResultDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t message_type = 0,
    int32_t uuid = 0,
    const char *session_id = nullptr) {
  auto session_id__ = session_id ? _fbb.CreateString(session_id) : 0;
  return FlatPacket::CreateFindMatchResult(
      _fbb,
      message_type,
      uuid,
      session_id__);
}

inline const FlatPacket::FindMatchResult *GetFindMatchResult(const void *buf) {
  return ::flatbuffers::GetRoot<FlatPacket::FindMatchResult>(buf);
}

inline const FlatPacket::FindMatchResult *GetSizePrefixedFindMatchResult(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlatPacket::FindMatchResult>(buf);
}

inline bool VerifyFindMatchResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatPacket::FindMatchResult>(nullptr);
}

inline bool VerifySizePrefixedFindMatchResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatPacket::FindMatchResult>(nullptr);
}

inline void FinishFindMatchResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::FindMatchResult> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFindMatchResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlatPacket::FindMatchResult> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatPacket

#endif  // FLATBUFFERS_GENERATED_FINDMATCHRESULT_FLATPACKET_H_
